// Enabling Prisma to do Referent
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#emulate-relations-in-prisma-with-the-prisma-relation-mode
// https://www.prisma.io/docs/guides/database/using-prisma-with-planetscale#how-to-emulate-relations-in-prisma-client
//
// In order to revert changes that cannot be rolled back(e.g migration deployment cannot move forward), follow:
// https://www.prisma.io/docs/guides/database/production-troubleshooting#moving-backwards-and-reverting-all-changes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  provider      String
  id            String        @id
  displayName   String
  email         String?
  picture       String?
  emailVerified Boolean       @default(false)
  sessions      UserSession[]
  Poll          Poll[]
}

model UserSession {
  id         String    @id
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String?
  csrfSecret String
  expiresOn  DateTime?

  @@index([userId])
}

model Poll {
  id                          String      @id @default(uuid())
  name                        String
  createdAt                   DateTime    @default(now())
  expiresOn                   DateTime?
  isActive                    Boolean?    @default(false)
  // NOTE: User deletes cascade to Poll (As an alternative remove record on schedule).
  author                      User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId                    String
  MoviePoll                   MoviePoll[]
  VotingToken                 VotingToken[]

  @@index([authorId])
}

model MoviePoll {
  pollId            String
  // NOTE: Poll deletes cascade to MoviePoll (As an alternative remove record on schedule).
  poll              Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId           Int
  VotingToken       VotingToken[]

  @@id([pollId, movieId])
  @@index([pollId])
}

model VotingToken {
  id            String      @default(uuid())
  pollId        String
  poll          Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId       Int?         
  Movie         MoviePoll?  @relation(fields: [pollId, movieId], references: [pollId, movieId], onDelete: Cascade, onUpdate: Cascade)
  unused        Boolean     @default(true)
  unshared      Boolean     @default(true)
  label         String?
  createdAt     DateTime    @default(now())

  @@id([id, pollId])
  @@index([pollId, movieId])
}
