// Enabling Prisma to do Referent
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#emulate-relations-in-prisma-with-the-prisma-relation-mode
// https://www.prisma.io/docs/guides/database/using-prisma-with-planetscale#how-to-emulate-relations-in-prisma-client
//
// In order to revert changes that cannot be rolled back(e.g migration deployment cannot move forward), follow:
// https://www.prisma.io/docs/guides/database/production-troubleshooting#moving-backwards-and-reverting-all-changes

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  provider      String
  id            String        @id
  displayName   String
  email         String?
  picture       String?
  emailVerified Boolean       @default(false)
  sessions      UserSession[]
  Poll          Poll[]
}

model UserSession {
  id         String    @id
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  csrfSecret String
  expiresOn  DateTime?

  @@index([userId])
}

model Poll {
  id         String      @id @default(uuid())
  name       String
  expiresOn  DateTime?
  isActive   Boolean?     @default(false)
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String
  MoviePolls MoviePoll[]

  @@index([authorId])
}

model MoviePoll {
  pollId    String
  poll      Poll   @relation(fields: [pollId], references: [id])
  movieId   Int
  voteCount Int?   @default(0)

  @@id([pollId, movieId])
  @@index([pollId])
}
