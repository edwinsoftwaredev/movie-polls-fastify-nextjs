import { FastifyPluginAsync, FastifyPluginOptions } from 'fastify';
import fastifyPlugin from 'fastify-plugin';
import fastifySession from '@fastify/session';
import fastifyCookie from '@fastify/cookie';
import { Session } from '@prisma/client';
import {
  PrismaClientKnownRequestError,
  PrismaClientValidationError,
} from '@prisma/client/runtime';

interface SessionPluginOptions extends FastifyPluginOptions {
  sessionSecret: string;
  isDevEnv: boolean;
}

const session: FastifyPluginAsync<SessionPluginOptions> = async (
  fastify,
  opts
) => {
  const { sessionSecret, isDevEnv } = opts;

  fastify.register(fastifyCookie);

  fastify.addHook('preHandler', async (req) => {
    const isSSR = req.headers['x-ssr'] === '1';
    const hasSessionId = !!req.cookies['sessionId'];
    req.session.set('isSSR', isSSR);
    req.session.set('hasSessionId', hasSessionId);

    // Adding the Google ID verification functionality
    // to the session
    req.session.verifyGoogleIdToken = fastify.verifyGoogleIdToken;
  });

  fastify.register(fastifySession, {
    secret: sessionSecret,
    cookie: {
      sameSite: 'strict',
      httpOnly: true,
      secure: !isDevEnv,
      maxAge: 15 * 60 * 1000,
    },
    rolling: false,
    // TODO: consider using a RedisJSON
    // instead of manually parsing JSON strings (slow)
    store: {
      // Adding "workaround" type to callback param,
      // this is due to stores(express.js like stores) compatability issues on the
      // @fastify/session plugin
      get(sessionId, callback: (...args: Array<any>) => void) {
        fastify.redisClient
          .get(sessionId)
          .then((sessionJson) => {
            if (sessionJson) return JSON.parse(sessionJson) as Session;
            // If session not found in cache
            // search session in persistent storage
            return fastify.prismaClient.session.findUniqueOrThrow({
              where: {
                id: sessionId,
              },
            });
          })
          .then((userSession) => {
            // NOTE that a userSession is returned which is part
            // of the session object. also the _csrf token in session is
            // overwritten.
            // TODO: validate whenwhen should the csrfToken should be recreated
            callback(undefined, {
              _csrf: userSession.csrfToken,
              userSession: {
                id: userSession.id,
                csrfToken: userSession.csrfToken,
                userId: userSession.userId,
                expiresOn: userSession.expiresOn
              },
            });
          })
          .catch((reason) => {
            // TODO: Fix that is the session is not found
            // (e.g user has a sessionID cookie but the session is not found in server side
            // or that a process on server side removes all expired sessions)
            // instead of showing the message session not found,
            // the server should redirect the user to the auth page and reset the session
            // cookie with a new id
            callback(reason);
          });
      },
      set(sessionId, session, callback) {
        const isSSR = session.get('isSSR') ?? false;
        const hasSessionId = session.get('hasSessionId') ?? false;
        // If SSR and sessionId is not provided in the request,
        // the session is not created.
        // NOTE: While this validation will prevent saving a new session
        // generated by the server(web-client server) and
        // not the client(browser) it will not prevent the execution
        // of the functionality to generate a new session by the session plugin
        // (create a session and signed it)
        if (isSSR && !hasSessionId) {
          callback();
          return;
        }

        const { userSession } = session;
        const sessionCsrfToken = session.get<string>('_csrf') || '';
        // 1. Save session in persistent storage
        // 2. Save session in session storage

        // If user was removed from database but from redis
        // the userId constraint will fail
        fastify.prismaClient?.session
          .upsert({
            where: {
              id: sessionId,
            },
            update: {
              csrfToken: sessionCsrfToken,
              // TODO: validate that the user's id is the same
              // on every update
              userId: userSession?.userId,
              expiresOn: session.cookie.expires
            },
            create: {
              id: sessionId,
              csrfToken: sessionCsrfToken,
              userId: userSession?.userId,
              expiresOn: session.cookie.expires
            },
          })
          .then((userSession) => {
            // The session type retrived from the session storage is not the same
            // as the type retrived from the persistant storage
            const { id: sessionId, csrfToken, userId, expiresOn } = userSession;
            const userSessionJSON = JSON.stringify({
              id: sessionId,
              csrfToken,
              userId,
              expiresOn
            });

            return fastify.redisClient.set(sessionId, userSessionJSON);
          })
          .then(() => {
            callback(undefined);
          })
          .catch((reason) => {
            if (reason instanceof PrismaClientKnownRequestError) {
              // checks that error is produce by the userId constraint
              // failing. If that is the case remove the session from redis
              if (
                reason.code === 'P2003' &&
                reason.meta &&
                reason.meta['field_name'] === 'userId'
              )
                fastify.redisClient.del(sessionId);
            } else {
              callback(reason);
            }
          });
      },
      destroy(sessionId, callback) {
        // Remove session from session store
        // Then remove session from persistent storage
        fastify.redisClient
          .del(sessionId)
          .then(() =>
            fastify.prismaClient.session.delete({
              where: {
                id: sessionId,
              },
            })
          )
          .then(() => {
            callback();
          })
          .catch((reason) => {
            callback(reason);
          });
      },
    },
  });

  fastify.addHook('preHandler', async (req, res) => {
    if (!req.session.userSession?.userId) {
      // res.redirect(301, '/');
    }
  });
};

export default fastifyPlugin(session);
